version: "3"
services:
  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    volumes:
      - "chatredis:/data"
    networks:
      - chatnetwork
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      retries: 3
      timeout: 5s

  mysql:
    image: "mysql:8.0"
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    volumes:
      - "chatmysql:/var/lib/mysql"
    networks:
      - chatnetwork
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-p${MYSQL_ROOT_PASSWORD}"]
      retries: 3
      timeout: 5s

  phpmyadmin:
    image: "phpmyadmin/phpmyadmin:latest"
    ports:
      - "8080:80"
    environment:
      MYSQL_USERNAME: "${MYSQL_USER}"
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      PMA_HOST: "mysql"
    networks:
      - chatnetwork
    depends_on:
      - mysql

  api:
    build:
      dockerfile: Dockerfile
      context: "./server"
    ports:
      - "5000:5000"
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
    volumes:
      - /app/node_modules
      - ./server:/app
    networks:
      - chatnetwork
    depends_on:
      - mysql

  client:
    build:
      dockerfile: Dockerfile
      context: "./client"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_PUBLIC_IMAGES=http://localhost:5000/images/
    volumes:
      - /app/node_modules
      - ./client:/app
    networks:
      - chatnetwork
    depends_on:
      - api

  socketio:
    build:
      dockerfile: Dockerfile
      context: "./socket"
    ports:
      - "7000:7000"
    volumes:
      - /app/node_modules
      - ./socket:/app
    networks:
      - chatnetwork
    depends_on:
      - api
      - client

  nginx:
    build:
      dockerfile: Dockerfile
      context: "./nginx"
    restart: always
    ports:
      - "80:80"
    depends_on:
      - api
      - client
    networks:
      - chatnetwork

networks:
  chatnetwork:
    driver: bridge

volumes:
  chatmysql:
    driver: local
  chatredis:
    driver: local
